/* FRANCIS DAGHER 212894606
 * deals with lights/shading functions
 *
 *	John Amanatides, Oct 2016
 */


#include <stddef.h>
#include <stdlib.h>
#include <math.h>
#include "artInternal.h"

#define CHECKERBOARD    1
#define ZONE_PLATE      2


#define MAX_RECURSION	10

extern double	Normalize(Vector *);
extern Vector	ReflectRay(Vector, Vector);
extern int	IntersectScene(Ray *, double *, Vector *, Material *);
extern int	ShadowProbe(Ray *, double);
extern int TransmitRay(Vector, Vector, double, double, Vector *);

typedef struct LightNode {
	Point position;
	double intensity;
	double radius;
	struct LightNode *next;
} LightNode;

static LightNode *lights;
static Color	background;
static Material	currentMaterial;
static Color black= {0.0, 0.0, 0.0}, white= {1.0, 1.0, 1.0};


char *
art_Light(double x, double y, double z, double intensity, double radius)
{
	LightNode *newLight;

	if(intensity <= 0.0 || radius < 0.0)
		return "art_Light: domain error";
	newLight= (LightNode *) malloc(sizeof(LightNode));
	newLight->position.v[0]= x;
	newLight->position.v[1]= y;
	newLight->position.v[2]= z;
	newLight->intensity= intensity;
	newLight->radius= radius;
	newLight->next= lights;
	lights= newLight;

	return NULL;
}


char *
art_Material(Material material)
{
	currentMaterial= material; /* should really check for mistakes */
	return NULL;
}


Material
GetCurrentMaterial(void)
{
	return currentMaterial;
}


char *
art_Background(Color color)
{
	if(color.v[0] < 0.0 || color.v[0] > 1.0 || color.v[1] < 0.0 || color.v[1] > 1.0 || color.v[2] < 0.0 || color.v[2] > 1.0)
		return "art_Background: domain error";
	background= color;
	return NULL;
}

/* for A4 */
static Color
Texture(Material *material, Point position)
{               
	int funnySum;
	double EPSILON= 0.0001;
	double contribution;
	Color result;

	switch(material->texture) {

	case CHECKERBOARD: 
		funnySum= floor(position.v[0]+EPSILON)
			+ floor(position.v[1]+EPSILON)
			+ floor(position.v[2]+EPSILON);
		if(funnySum % 2)
			return white;
		else    return material->col;
	case ZONE_PLATE:
		contribution= 0.5*cos(DOT(position, position))+0.5;
		TIMES(result, material->col, contribution);
		return result;  
	default:                
	return material->col;
	}       
}       

/*
 * a simple shader
 */
static Color
ComputeRadiance(Ray *ray, double t, Vector normal, Material material)
{

  Point intersection;
  Vector lightDirection;
  Vector eye;
  Vector reflect;
  Vector te;
  Color amb;
  Color dif;
  Color spec;
  Color result;
  
  double intensity = lights->intensity;
  double iDiff;
  double iSpec;
  
  
  
  
	(void) Normalize(&normal);
 
  TIMES(amb, material.col, material.Ka);

  
  intersection.v[0] = (ray->origin.v[0] + t * ray->direction.v[0]);
  intersection.v[1] = (ray->origin.v[1] + t * ray->direction.v[1]);
  intersection.v[2] = (ray->origin.v[2] + t * ray->direction.v[2]);
  
  
  MINUS(lightDirection, intersection, lights->position);
  
  (void) Normalize(&lightDirection);
  
  if( (DOT(lightDirection, normal)) > 0)
    iDiff = material.Kd * DOT(normal, lightDirection);
  else
    iDiff = 0;
  TIMES(dif, material.col, iDiff);
  PLUS(result, dif, amb);
  
  eye = ray->direction;
  TIMES(eye, eye, -1.0);
  
  
  (void) Normalize(&eye);
  reflect = ReflectRay(lightDirection, normal);
  
	(void) Normalize(&reflect);
  if ((DOT(eye, reflect) > 0))
  	iSpec = material.Ks * pow((DOT(eye, reflect)), material.n);
  else 
  	iSpec = 0;
  
  TIMES(spec, material.col, iSpec);
  PLUS(result, result, spec);
  
  
  
 
 return result;
	
}


Color
GetRadiance(Ray *ray)
{
	double t;
	Vector normal;
	Material material;

	if(IntersectScene(ray, &t, &normal, &material) == HIT)
		return ComputeRadiance(ray, t, normal, material);
	else	return background;
}


void InitLighting()
{
	Material material;

	material.col= white;
	material.Ka= 0.2;
	material.Kd= 0.6;
	material.Ks= 0.7;
	material.n= 50.0;
	material.Kr= 0.0;
	material.Kt= 0.0;
	material.index= 1.0;
	(void) art_Material(material);
	(void) art_Background(black);

	lights= NULL;
}


void FinishLighting()
{
	LightNode *node;

	while(lights) {
		node= lights;
		lights= lights->next;

		free((void *) node);
	}
}
